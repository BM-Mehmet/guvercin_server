import json
import time
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
import redis
import uvicorn
import firebase_admin
from firebase_admin import credentials, messaging

# Firebase Admin başlat
cred = credentials.Certificate("/home/guvercin/guvercin-b5d67-firebase-adminsdk-ieas1-28df47be95.json")  # Anahtar dosyan
firebase_admin.initialize_app(cred)

# Redis bağlantısı
r = redis.StrictRedis(host='localhost', port=6379, db=0, decode_responses=True)

# FastAPI uygulaması
app = FastAPI()

# Aktif WebSocket bağlantılarını tutmak için
active_connections = {}

# WebSocket endpoint
@app.websocket("/ws/{username}")
async def websocket_endpoint(websocket: WebSocket, username: str):
    await websocket.accept()
    active_connections[username] = websocket

    try:
        while True:
            data = await websocket.receive_text()
            message_data = json.loads(data)

            sender = message_data["sender"]
            receiver = message_data["receiver"]
            message = message_data["message"]

            sender_id = None
            receiver_id = None

            for user in r.smembers("users"):
                user_name, user_id = user.split(":")
                if user_name == sender:
                    sender_id = user_id
                elif user_name == receiver:
                    receiver_id = user_id

            if not sender_id or not receiver_id:
                continue

            # Mesaj verisini oluştur
            message_data["timestamp"] = int(time.time())
            message_data["status"] = "sent"
            message_json = json.dumps(message_data)

            # Mesajı Redis'e yaz
            r.rpush(f"chat:{sender_id}:{receiver_id}", message_json)

            # Mesajı karşı tarafa ilet (eğer online ise)
            if receiver in active_connections:
                await active_connections[receiver].send_text(data)
            else:
                # Karşı taraf online değilse -> FCM ile bildirim gönder
                user_key = f"user:{receiver}"
                user_info = r.hgetall(user_key)

                fcm_token = user_info.get("fcm_token")

                if fcm_token:
                    try:
                        notification = messaging.Message(
                            notification=messaging.Notification(
                                title=f"Yeni bir mesajınız var!"
                            ),
                            token=fcm_token,
                        )
                        response = messaging.send(notification)
                        print(f"FCM bildirimi gönderildi: {response}")
                    except Exception as e:
                        print(f"FCM bildirimi gönderilemedi: {str(e)}")

    except WebSocketDisconnect:
        del active_connections[username]


# Mesajları alma endpoint'i
@app.get("/get_messages/{sender}/{receiver}")
async def get_messages(sender: str, receiver: str):
    sender_id = None
    receiver_id = None

    for user in r.smembers("users"):
        user_name, user_id = user.split(":")
        if user_name == sender:
            sender_id = user_id
        elif user_name == receiver:
            receiver_id = user_id

    if not sender_id or not receiver_id:
        return {"error": "Kullanıcı ID'si bulunamadı"}, 404

    messages_sender_to_receiver = r.lrange(f"chat:{sender_id}:{receiver_id}", 0, -1)
    messages_receiver_to_sender = r.lrange(f"chat:{receiver_id}:{sender_id}", 0, -1)

    all_messages = [json.loads(msg) for msg in messages_sender_to_receiver + messages_receiver_to_sender]
    all_messages.sort(key=lambda x: x['timestamp'])

    return all_messages


# Uygulamayı başlat
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5004)

